syntax = "proto3";
package irismod.mt;

import "gogoproto/gogo.proto";

option go_package = "github.com/irisnet/irismod/modules/mt/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the mt Msg service.
service Msg {
    // IssueDenom defines a method for issue a denom.
    rpc IssueDenom(MsgIssueDenom) returns (MsgIssueDenomResponse);

    // MintMT defines a method for mint a new mt
    rpc MintMT(MsgMintMT) returns (MsgMintMTResponse);

    // RefundHTLC defines a method for editing a mt.
    rpc EditMT(MsgEditMT) returns (MsgEditMTResponse);

    // TransferMT defines a method for transferring a mt.
    rpc TransferMT(MsgTransferMT) returns (MsgTransferMTResponse);

    // BurnMT defines a method for burning a mt.
    rpc BurnMT(MsgBurnMT) returns (MsgBurnMTResponse);

    // TransferDenom defines a method for transferring a denom.
    rpc TransferDenom(MsgTransferDenom) returns (MsgTransferDenomResponse);
}

// MsgIssueDenom defines an SDK message for creating a new denom.
message MsgIssueDenom {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    string creator = 3;
    bytes data = 4;
}

// MsgIssueDenomResponse defines the Msg/IssueDenom response type.
message MsgIssueDenomResponse {}

// MsgTransferMT defines an SDK message for transferring an MT to recipient.
message MsgTransferMT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2;
    uint64 amount = 3;
    string sender = 4;
    string recipient = 5;
}

// MsgTransferMTResponse defines the Msg/TransferMT response type.
message MsgTransferMTResponse {}

// MsgEditMT defines an SDK message for editing a mt.
message MsgEditMT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2;
    bytes data = 3;
    string sender = 4;
}

// MsgEditMTResponse defines the Msg/EditMT response type.
message MsgEditMTResponse {}

// MsgMintMT defines an SDK message for creating a new MT.
message MsgMintMT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2;
    bytes data = 3;
    string sender = 4;
    string recipient = 5;
}

// MsgMintMTResponse defines the Msg/MintMT response type.
message MsgMintMTResponse {}

// MsgBurnMT defines an SDK message for burning a MT.
message MsgBurnMT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2;
    string sender = 3;
    uint64 amount = 4;
}

// MsgBurnMTResponse defines the Msg/BurnMT response type.
message MsgBurnMTResponse {}


// MsgTransferDenom defines an SDK message for transferring an denom to recipient.
message MsgTransferDenom {
    option (gogoproto.equal) = true;
    string id = 1;
    string sender = 2;
    string recipient = 3;
}

// MsgTransferDenomResponse defines the Msg/TransferDenom response type.
message MsgTransferDenomResponse {}
