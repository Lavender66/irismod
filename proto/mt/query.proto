syntax = "proto3";
package irismod.mt;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "mt/mt.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/irisnet/irismod/modules/mt/types";

// Query defines the gRPC querier service for MT module
service Query {
    // Supply queries the total supply of a given denom or owner
    rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
        option (google.api.http).get = "/irismod/mt/collections/{denom_id}/supply";
    }

    // Supply queries the total supply of a given denom or owner
    rpc MTSupply(QueryMtsRequest) returns (QueryMtsResponse) {
        option (google.api.http).get = "/irismod/mt/collections/{denom_id}/supply";
    }

    // Owner queries the MTs of the specified owner
    rpc Owner(QueryOwnerRequest) returns (QueryOwnerResponse) {
        option (google.api.http).get = "/irismod/mt/mts";
    }

    // Collection queries the MTs of the specified denom
    rpc Collection(QueryCollectionRequest) returns (QueryCollectionResponse) {
        option (google.api.http).get = "/irismod/mt/collections/{denom_id}";
    }

    // Denom queries the definition of a given denom
    rpc Denom(QueryDenomRequest) returns (QueryDenomResponse) {
        option (google.api.http).get = "/irismod/mt/denoms/{denom_id}";
    }

    // Denoms queries all the denoms
    rpc Denoms(QueryDenomsRequest) returns (QueryDenomsResponse) {
        option (google.api.http).get = "/irismod/mt/denoms";
    }

    // MT queries the MT for the given denom and token ID
    rpc MT(QueryMTRequest) returns (QueryMTResponse) {
        option (google.api.http).get = "/irismod/mt/mts/{denom_id}/{token_id}";
    }
}

// QuerySupplyRequest is the request type for the Query RPC method
message QuerySupplyRequest {
    string denom_id = 1;
    string owner = 2;
}

// QuerySupplyResponse is the response type for the Query/Supply RPC method
message QuerySupplyResponse {
    uint64 amount = 1;
}

message QueryMtsRequest {
    string denom_id = 1;
    string mt_id = 2;
}

message QueryMtsResponse {
    uint64 amount = 1;
}

// QueryOwnerRequest is the request type for the Query/Owner RPC method
message QueryOwnerRequest {
    string denom_id = 1;
    // pagination defines an optional pagination for the request.
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryOwnerResponse is the response type for the Query/Owner RPC method
message QueryOwnerResponse {
    Owner owner = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryCollectionRequest is the request type for the Query/Collection RPC method
message QueryCollectionRequest {
    string denom_id = 1;
    // pagination defines an optional pagination for the request.
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryCollectionResponse is the response type for the Query/Collection RPC method
message QueryCollectionResponse {
    Collection collection = 1;
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDenomRequest is the request type for the Query/Denom RPC method
message QueryDenomRequest {
    string denom_id = 1;
}

// QueryDenomResponse is the response type for the Query/Denom RPC method
message QueryDenomResponse {
    Denom denom = 1;
}

// QueryDenomsRequest is the request type for the Query/Denoms RPC method
message QueryDenomsRequest {
    // pagination defines an optional pagination for the request.
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDenomsResponse is the response type for the Query/Denoms RPC method
message QueryDenomsResponse {
    repeated Denom denoms = 1 [ (gogoproto.nullable) = false ];

    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryMTRequest is the request type for the Query/MT RPC method
message QueryMTRequest {
    string denom_id = 1;
    string mt_id = 2;
}

// QueryMTResponse is the response type for the Query/MT RPC method
message QueryMTResponse {
    MT mt = 1 [ (gogoproto.customname) = "MT" ];
}